<?xml version="1.0" encoding="utf-8"?>
<mx:Module xmlns:fx="http://ns.adobe.com/mxml/2009" 
		   xmlns:s="library://ns.adobe.com/flex/spark"
		   xmlns:mx="library://ns.adobe.com/flex/mx"
		   xmlns:c="project.libsys.components.*"
		   creationComplete="creationCompleteHandler(event)"
		   width="100%" height="100%" layout="absolute">
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import project.libsys.beans.Reader;
			
			[Bindable]
			private var readersData : ArrayCollection;
			
			private var readerSaved : Reader;
			private var idxSaved : int;

			protected function creationCompleteHandler(event:FlexEvent):void
			{
				readerService.getReaders();
			}
			
			private function remoteMethodFault(event : FaultEvent) : void
			{
				Alert.show(event.fault.faultString);
			}
			
			private function getReadersResult(event : ResultEvent) : void
			{
				readersData = ArrayCollection(event.result);
			}

			protected function addReaderButton_clickHandler(event:MouseEvent):void
			{
				var reader : Reader = new Reader();
				reader.id = -1;
				reader.male = true;
				readersData.addItem(reader);
				var idx : int = readersData.length - 1;
				readerDataGrid.editedItemPosition = {rowIndex: idx, columnIndex: 0};
				currentState = "saveClicked";
			}

			protected function cancelButton_clickHandler(event:MouseEvent):void
			{
				switch(currentState) {
					case "saveClicked":
						readersData.removeItemAt(readersData.length - 1);
						break;
					case "editClicked":
						readersData.removeItemAt(idxSaved);
						readersData.addItemAt(readerSaved, idxSaved);
						readerDataGrid.selectedIndex = idxSaved;
						break;
				}
				currentState = "normal";
			}
			
			private function maleLabelFunction(item:Object, column:DataGridColumn):String
			{
				return item.male
					? resourceManager.getString('app', 'module.reader.male')
					: resourceManager.getString('app', 'module.reader.female');
			}

			protected function deleteReaderButton_clickHandler(event:MouseEvent):void
			{
				Alert.show(resourceManager.getString('app', 'module.reader.removeCongirm'),
						   resourceManager.getString('app', 'module.reader.remove.title'),
						   Alert.YES | Alert.NO, null, onDeleteConfirm, null, Alert.NO);
				currentState = "normal";
			}
			
			private function onDeleteConfirm(event : CloseEvent) : void
			{
				if(event.detail == Alert.YES) {
					readerService.deleteReader(readerDataGrid.selectedItem.id);
				}
			}
			
			private function deleteReaderResult(event : ResultEvent) : void
			{
				if(Boolean(event.result)) {
					readersData.removeItemAt(readerDataGrid.selectedIndex);
				}
			}

			protected function editReaderButton_clickHandler(event:MouseEvent):void
			{
				idxSaved = readerDataGrid.selectedIndex;
				readerSaved = readerDataGrid.selectedItem.clone();
				readerDataGrid.editedItemPosition = {rowIndex: readerDataGrid.selectedIndex, columnIndex: 0};
				currentState = "editClicked";
			}

			protected function saveReaderButton_clickHandler(event:MouseEvent):void
			{
				switch(currentState) {
					case "saveClicked":
						readerService.addReader(readerDataGrid.selectedItem);
						break;
					case "editClicked":
						readerService.editReader(readerDataGrid.selectedItem);
						break;
				}
				currentState = "normal";
			}
			
			private function addReaderResult(event : ResultEvent) : void
			{
				var r : Reader = Reader(event.result);
				readersData.getItemAt(readersData.length - 1).id = r.id;
			}
			
			private function editReaderResult(event : ResultEvent) : void
			{
				if(!Boolean(event.result)) {
					readersData.removeItemAt(idxSaved);
					readersData.addItemAt(readerSaved, idxSaved);
					readerDataGrid.selectedIndex = idxSaved;
				}
			}

		]]>
	</fx:Script>
	
	<mx:states>
		<s:State name="normal" />
		<s:State name="saveClicked" stateGroups="clicked"/>
		<s:State name="editClicked" stateGroups="clicked"/>
	</mx:states>
	
	<fx:Declarations>
		<s:RemoteObject id="readerService" destination="readerService">
			<s:channelSet>
				<s:ChannelSet>
					<s:AMFChannel uri="messagebroker/amf"/>
				</s:ChannelSet>
			</s:channelSet>
			<s:method name="getReaders" result="getReadersResult(event)" fault="remoteMethodFault(event)"/>
			<s:method name="deleteReader" result="deleteReaderResult(event)" fault="remoteMethodFault(event)"/>
			<s:method name="addReader" result="addReaderResult(event)" fault="remoteMethodFault(event)"/>
			<s:method name="editReader" result="editReaderResult(event)" fault="remoteMethodFault(event)"/>
		</s:RemoteObject>
	</fx:Declarations>
	
	<c:ToolBar>
		<c:IconButton id="addReaderButton" label="{resourceManager.getString('app', 'module.reader.add')}" icon="@Embed(source='/assets/add.png')"
					  enabled.normal="true" enabled.clicked="false"
					  click="addReaderButton_clickHandler(event)"/>
		<c:IconButton id="deleteReaderButton" label="{resourceManager.getString('app', 'module.reader.remove')}" icon="@Embed(source='/assets/del.png')"
					  enabled="{readerDataGrid.selectedIndex >= 0 &amp;&amp; readerDataGrid.selectedItem.id > -1}"
					  click="deleteReaderButton_clickHandler(event)"/>
		<c:IconButton id="editReaderButton" label="{resourceManager.getString('app', 'module.reader.edit')}" icon="@Embed(source='/assets/edit.png')"
					  enabled="{readerDataGrid.selectedIndex >= 0 &amp;&amp; readerDataGrid.selectedItem.id > -1}"
					  click="editReaderButton_clickHandler(event)"/>
		<c:IconButton id="saveReaderButton" label="{resourceManager.getString('app', 'module.reader.save')}" icon="@Embed(source='/assets/save.png')"
					  enabled.normal="false" enabled.clicked="true"
					  click="saveReaderButton_clickHandler(event)"/>
		<c:IconButton id="cancelButton" label="{resourceManager.getString('app', 'module.reader.cancel')}" icon="@Embed(source='/assets/cancel.png')"
					  enabled.normal="false" enabled.clicked="true"
					  click="cancelButton_clickHandler(event)"/>
	</c:ToolBar>
	<mx:DataGrid id="readerDataGrid" top="30" width="100%" bottom="2" dataProvider="{readersData}"
				 editable.normal="false" editable.saveClicked="true" editable.editClicked="true">
		<mx:columns>
			<mx:DataGridColumn headerText="{resourceManager.getString('app', 'module.reader.name')}" dataField="name"/>
			<mx:DataGridColumn headerText="{resourceManager.getString('app', 'module.reader.sex')}" labelFunction="maleLabelFunction">
				<mx:itemEditor>
					<fx:Component>
						<s:MXDataGridItemRenderer width="100%" height="100%">
							<fx:Script>
								<![CDATA[
									import spark.events.IndexChangeEvent;
									
									override public function set data(value : Object) : void
									{
										super.data = value;
										sexList.selectedIndex = data.male ? 0 : 1;
									}
									
									protected function sexList_changeHandler(event:IndexChangeEvent):void
									{
										data.male = sexList.selectedItem.male;
									}

								]]>
							</fx:Script>
							<s:DropDownList id="sexList" width="100%" height="100%" labelField="label"
										    change="sexList_changeHandler(event)">
								<s:dataProvider>
									<s:ArrayList>
										<fx:Object male="true" label="{resourceManager.getString('app', 'module.reader.male')}" />
										<fx:Object male="false" label="{resourceManager.getString('app', 'module.reader.female')}" />
									</s:ArrayList>
								</s:dataProvider>
							</s:DropDownList>
						</s:MXDataGridItemRenderer>
					</fx:Component>
				</mx:itemEditor>
			</mx:DataGridColumn>
		</mx:columns>
	</mx:DataGrid>
</mx:Module>
