<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:modules="project.libsys.modules.*"
			   xmlns:c="project.libsys.components.*"
			   minWidth="955" minHeight="600" currentState="login"
			   initialize="initializeHandler(event)"
			   creationComplete="creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.core.IVisualElement;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.events.StateChangeEvent;
			import mx.events.ValidationResultEvent;
			import mx.managers.BrowserManager;
			import mx.modules.IModuleInfo;
			import mx.modules.Module;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import project.libsys.beans.User;
			import project.libsys.events.ModuleLoadEvent;
			import project.libsys.modules.BookManageComp;
			import project.libsys.modules.LendBookComp;
			import project.libsys.modules.ReaderManageComp;
			import project.libsys.modules.UserManageComp;
			import project.libsys.skins.CloseableTabBarSkin;
			import project.libsys.utils.AppContext;
			import project.libsys.utils.ModuleFactory;
			import project.libsys.utils.Session;
			
			import spark.components.NavigatorContent;
			import spark.events.IndexChangeEvent;
			
			[Bindable]
			private var userList : ArrayList = new ArrayList(["admin"]);
			
			private var validators : Array;
			
			private var moduleLoader : ModuleFactory = ModuleFactory.instance;
			
			protected function loginButton_clickHandler(event:MouseEvent):void
			{
				var results : Array = Validator.validateAll(validators);
				if(results.length == 0) {
					var user : User = new User();
					user.name = userNameInput.selectedItem;
					user.password = pwdInput.text;
					systemService.login(user);
				}
			}
			
			private function loginResult(event : ResultEvent) : void
			{
				var success : Boolean = Boolean(event.result);
				if(success) {
					Session.instance.userName = userNameInput.selectedItem;
					currentState = "main";
				} else {
					Alert.show("用户名或者密码错误！");
				}
			}
			
			private function loginFault(event : FaultEvent) : void
			{
				Alert.show(event.fault.faultString);
			}
			
			protected function userNameInput_changeHandler(event:IndexChangeEvent):void
			{
				if(userNameInput.selectedIndex == ComboBox.CUSTOM_SELECTED_ITEM) {
					userList.addItem(userNameInput.selectedItem);
					userNameInput.selectedIndex = userList.length - 1;
				}
			}
			
			protected function creationCompleteHandler(event:FlexEvent):void
			{
				BrowserManager.getInstance().setTitle("图书管理系统");
				validators = [nameRequire, passwordRequire];
				
				moduleLoader.addEventListener(ModuleLoadEvent.LOAD_SUCCESS, onModuleLoadSuccess);
				moduleLoader.addEventListener(ModuleLoadEvent.LOAD_FAILED, onModuleLoadFailed);
			}
			
			protected function menuTree_itemClickHandler(event:ListEvent):void
			{
				var item : Object = menuTree.selectedItem;
				if(menuTree.dataDescriptor.isBranch(item)) {
					menuTree.expandItem(item, !menuTree.isItemOpen(item), false);
				} else {
					moduleLoader.load("project/libsys/modules/" + item.@comp + ".swf");
				}
			}
			
			private function onModuleLoadSuccess(event : ModuleLoadEvent) : void
			{
				var module : IModuleInfo = event.module;
				var url : String = module.url;
				var comp : String = url.substring(url.lastIndexOf("/") + 1, url.indexOf(".swf"));
				var ctx : AppContext = AppContext.instance;
				var idx : int = ctx.getModuleIndex(comp);
				if(idx >= 0) {
					mainTabBar.selectedIndex = idx;
				} else {
					var navPage : NavigatorContent = new NavigatorContent();
					navPage.addElement(module.factory.create() as IVisualElement);
					navPage.label = menuData..node.(@comp==comp).@label;
					mainTabBar.dataProvider.addItem(navPage);
					mainTabBar.setCloseableTab(mainPageStack.length - 1, true);
					mainTabBar.selectedItem = navPage;
				}
			}
			
			private function onModuleLoadFailed(event : ModuleLoadEvent) : void
			{
				Alert.show(event.message);
			}
			
			protected function initializeHandler(event:FlexEvent):void
			{
				var toolTipCssDecl:CSSStyleDeclaration = styleManager.getStyleDeclaration("mx.controls.ToolTip");
				if (!toolTipCssDecl) {
					toolTipCssDecl = new CSSStyleDeclaration("mx.controls.ToolTip");
				}
				toolTipCssDecl.setStyle("fontSize", 12);
				var globalCssDecl:CSSStyleDeclaration = styleManager.getStyleDeclaration("global");
				if (!globalCssDecl) {
					globalCssDecl = new CSSStyleDeclaration("global");
				}
				globalCssDecl.setStyle("fontSize", 12);
				globalCssDecl.setStyle("fontFamily", "宋体");
			}

		]]>
	</fx:Script>
	
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		.errorTip {
			fontSize: 12;
		}
	</fx:Style>
	
	<fx:Declarations>
		<s:RemoteObject id="systemService" destination="systemService">
			<s:channelSet>
				<s:ChannelSet>
					<s:AMFChannel id="myAmf" uri="messagebroker/amf"/>
				</s:ChannelSet>
			</s:channelSet>
			<s:method name="login" result="loginResult(event)" fault="loginFault(event)"/>
		</s:RemoteObject>
		
		<mx:Validator id="nameRequire" required="true"
					  source="{userNameInput}" property="selectedItem"/>
		<mx:Validator id="passwordRequire" required="true"
					  source="{pwdInput}" property="text"/>
		
		<fx:XML id="menuData">
			<menu>
				<node label="借还" comp="">
					<node label="书刊借还" comp="LendBookComp"/>
				</node>
				<node label="管理" comp="">
					<node label="书刊管理" comp="BookManageComp"/>
					<node label="读者管理" comp="ReaderManageComp"/>
					<node label="用户管理" comp="UserManageComp"/>
				</node>
			</menu>
		</fx:XML>
	</fx:Declarations>
	
	<s:states>
		<s:State name="main"/>
		<s:State name="login"/>
	</s:states>

	<s:Group includeIn="login" horizontalCenter="0" verticalCenter="0">
		<s:BitmapImage id="loginBgImage" horizontalCenter="0" verticalCenter="0"
					   source="@Embed(source='/assets/login_bg.png')" />
		<mx:Form verticalCenter="17" right="42">
			<mx:FormItem label="用户名" required="true">
				<s:ComboBox width="128" id="userNameInput" dataProvider="{userList}"
							change="userNameInput_changeHandler(event)"/>
			</mx:FormItem>
			<mx:FormItem label="密码" required="true">
				<s:TextInput id="pwdInput" displayAsPassword="true" text="admin"/>
			</mx:FormItem>
		</mx:Form>
		<s:Button label="登录" id="loginButton"
				  click="loginButton_clickHandler(event)" horizontalCenter="58" y="190"/>
	</s:Group>
	
	<s:Group includeIn="main" width="100%" height="80">
		<s:BitmapImage id="topImage" verticalCenter="0"
					   source="@Embed(source='/assets/top.png')" />
		<s:HGroup bottom="10" right="10" verticalAlign="middle">
			<s:Label fontSize="16" text="用户名: {userNameInput.selectedItem}" />
			<mx:LinkButton fontSize="16" label="退出" />
		</s:HGroup>
	</s:Group>
	<s:HGroup includeIn="main" left="0" right="0" top="80" bottom="0" gap="2">
		<s:Group width="200" height="100%">
			<mx:Image verticalCenter="0" right="0" width="13"/>
			<mx:Tree id="menuTree" showRoot="false"
					 labelField="@label" dataProvider="{menuData}"
					 top="0" bottom="0" left="0" width="200"
					 itemClick="menuTree_itemClickHandler(event)"/>
		</s:Group>
		<s:VGroup width="100%" height="100%" gap="0">
			<c:CloseableTabBar id="mainTabBar" height="26" dataProvider="{mainPageStack}"/>
			<mx:ViewStack id="mainPageStack" width="100%" height="100%"/>
		</s:VGroup>
	</s:HGroup>
</s:Application>